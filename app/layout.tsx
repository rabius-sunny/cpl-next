import { Toaster } from '@/components/ui/sonner'
import { UserProvider } from '@/lib/auth'
import { SiteDataProvider } from '@/lib/dataContext'
import retrieveUserFromSession from '@/utils/getUser'
import type { Metadata } from 'next'
import { Poppins, Raleway } from 'next/font/google'
import './globals.css'

const poppins = Poppins({
  weight: ['200', '300', '400', '500', '600', '700', '800', '900'],
  subsets: ['latin'],
  variable: '--font-poppins'
})

const raleway = Raleway({
  weight: ['200', '300', '400', '500', '600', '700', '800', '900'],
  subsets: ['latin', 'cyrillic'],
  variable: '--font-raleway'
})

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app'
}

const skipApiCall = process.env.NEXT_SKIP_API_CALLS

export default async function RootLayout({
  children
}: Readonly<{
  children: React.ReactNode
}>) {
  const userPromise = retrieveUserFromSession()

  if (skipApiCall) {
    return (
      <html lang='en'>
        <body
          className={`${poppins.className} ${raleway.variable}`}
          suppressHydrationWarning
        >
          <UserProvider userPromise={userPromise}>
            <SiteDataProvider initialData={null}>
              <Toaster richColors closeButton />
              <>{children}</>
            </SiteDataProvider>
          </UserProvider>
        </body>
      </html>
    )
  }

  const homeDataRes = await fetch(`${process.env.NEXT_PUBLIC_API}/get-data`, {
    next: { tags: ['data'], revalidate: 120 }
  })
  const othersDataRes = await fetch(`${process.env.NEXT_PUBLIC_API}/others-content`, {
    next: { tags: ['others'], revalidate: 120 }
  })

  if (!homeDataRes.ok || !othersDataRes.ok) {
    throw new Error('No data available')
  }

  const data: ResponseData = await homeDataRes.json()
  const othersData: OthersResponse = await othersDataRes.json()

  if (!data.data || !othersData.data) {
    throw new Error('No data available')
  }

  const siteContent = data.data
  const othersContent = othersData.data

  const allData = {
    ...siteContent,
    ...othersContent
  }

  return (
    <html lang='en'>
      <body
        className={`${poppins.className} ${raleway.variable}`}
        suppressHydrationWarning
      >
        <UserProvider userPromise={userPromise}>
          <SiteDataProvider initialData={allData}>
            <Toaster richColors closeButton />
            <>{children}</>
          </SiteDataProvider>
        </UserProvider>
      </body>
    </html>
  )
}
